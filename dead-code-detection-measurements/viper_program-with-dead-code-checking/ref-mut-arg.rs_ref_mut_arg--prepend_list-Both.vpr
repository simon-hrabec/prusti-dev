domain MirrorDomain  {
  
  function mirror_simple$m_len__$TY$__Snap$struct$m_List$$int$(_1: Snap$struct$m_List): Int 
  
  function mirror_simple$m_lookup__$TY$__Snap$struct$m_List$$int$$$int$(_1: Snap$struct$m_List,
  _2: Int): Int 
}

domain Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_  {
  
  function discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(): Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_ 
  
  function cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_0: Snap$struct$m_List): Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_ 
  
  function Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List(self: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_): Snap$struct$m_List 
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$discriminant_range {
    (forall self: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_ ::
      { discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$0$discriminant_axiom {
    discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$$int$(cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_()) ==
    0
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$1$injectivity {
    (forall _l_0: Snap$struct$m_List, _r_0: Snap$struct$m_List ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_l_0),
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_r_0) }
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_l_0) ==
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$1$discriminant_axiom {
    (forall _0: Snap$struct$m_List ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_0) }
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_0)) ==
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$1$field$f$0$axiom {
    (forall _0: Snap$struct$m_List ::
      { Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_0)) }
      Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_0)) ==
      _0)
  }
}

domain Snap$struct$m_List  {
  
  function cons$0$__$TY$__Snap$struct$m_List$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List(_0: Int,
  _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_): Snap$struct$m_List 
  
  function Snap$struct$m_List$0$field$f$value__$TY$__Snap$struct$m_List$$int$(self: Snap$struct$m_List): Int 
  
  function Snap$struct$m_List$0$field$f$next__$TY$__Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(self: Snap$struct$m_List): Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_ 
  
  axiom Snap$struct$m_List$0$injectivity {
    (forall _l_0: Int, _l_1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_,
    _r_0: Int, _r_1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_ ::
      { cons$0$__$TY$__Snap$struct$m_List$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List(_l_0,
      _l_1), cons$0$__$TY$__Snap$struct$m_List$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List(_r_0,
      _r_1) }
      cons$0$__$TY$__Snap$struct$m_List$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List(_l_0,
      _l_1) ==
      cons$0$__$TY$__Snap$struct$m_List$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List(_r_0,
      _r_1) ==>
      _l_0 == _r_0 && _l_1 == _r_1)
  }
  
  axiom Snap$struct$m_List$0$field$f$value$axiom {
    (forall _0: Int, _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_ ::
      { Snap$struct$m_List$0$field$f$value__$TY$__Snap$struct$m_List$$int$(cons$0$__$TY$__Snap$struct$m_List$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List(_0,
      _1)) }
      Snap$struct$m_List$0$field$f$value__$TY$__Snap$struct$m_List$$int$(cons$0$__$TY$__Snap$struct$m_List$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List(_0,
      _1)) ==
      _0)
  }
  
  axiom Snap$struct$m_List$0$field$f$value$valid {
    (forall self: Snap$struct$m_List ::
      { Snap$struct$m_List$0$field$f$value__$TY$__Snap$struct$m_List$$int$(self) }
      0 <=
      Snap$struct$m_List$0$field$f$value__$TY$__Snap$struct$m_List$$int$(self) &&
      Snap$struct$m_List$0$field$f$value__$TY$__Snap$struct$m_List$$int$(self) <=
      4294967295)
  }
  
  axiom Snap$struct$m_List$0$field$f$next$axiom {
    (forall _0: Int, _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_ ::
      { Snap$struct$m_List$0$field$f$next__$TY$__Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(cons$0$__$TY$__Snap$struct$m_List$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List(_0,
      _1)) }
      Snap$struct$m_List$0$field$f$next__$TY$__Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(cons$0$__$TY$__Snap$struct$m_List$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List(_0,
      _1)) ==
      _1)
  }
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Some: Ref

field f$0: Ref

field f$next: Ref

field f$value: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function builtin$unreach__$TY$__$int$$$int$(): Int
  requires false


function m_len__$TY$__Snap$struct$m_List$$int$(_1: Snap$struct$m_List): Int
  requires true
  requires true
  ensures result > 0
  ensures 0 <= result
  ensures [result ==
    mirror_simple$m_len__$TY$__Snap$struct$m_List$$int$(_1),
    true]
{
  (discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$$int$(Snap$struct$m_List$0$field$f$next__$TY$__Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_1)) ==
  0 ?
    1 :
    1 +
    m_len__$TY$__Snap$struct$m_List$$int$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List(Snap$struct$m_List$0$field$f$next__$TY$__Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_1))))
}

function m_lookup__$TY$__Snap$struct$m_List$$int$$$int$(_1: Snap$struct$m_List,
  _2: Int): Int
  requires true
  requires 0 <= _2 && _2 < m_len__$TY$__Snap$struct$m_List$$int$(_1)
  requires 0 <= _2
  ensures true
  ensures 0 <= result
  ensures [result ==
    mirror_simple$m_lookup__$TY$__Snap$struct$m_List$$int$$$int$(_1, _2),
    true]
{
  (_2 != 0 ?
    (discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$$int$(Snap$struct$m_List$0$field$f$next__$TY$__Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_1)) ==
    0 ?
      builtin$unreach__$TY$__$int$$$int$() :
      m_lookup__$TY$__Snap$struct$m_List$$int$$$int$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List(Snap$struct$m_List$0$field$f$next__$TY$__Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_1)),
      _2 - 1)) :
    Snap$struct$m_List$0$field$f$value__$TY$__Snap$struct$m_List$$int$(_1))
}

function m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$$int$(self: Ref): Int
  requires acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(self)) ==
    result
{
  (unfolding acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(self), read$()) in
    self.discriminant)
}

function snap$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(self: Ref): Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_
  requires acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(self), read$())
{
  ((unfolding acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_((unfolding acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(self), read$()) in
      (unfolding acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_Some(self.enum_Some), read$()) in
        (unfolding acc(struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global(self.enum_Some.f$0), read$()) in
          snap$__$TY$__Snap$struct$m_List$struct$m_List$Snap$struct$m_List(self.enum_Some.f$0.val_ref))))) :
    cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_())
}

function snap$__$TY$__Snap$struct$m_List$struct$m_List$Snap$struct$m_List(self: Ref): Snap$struct$m_List
  requires acc(struct$m_List(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_List$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_List((unfolding acc(struct$m_List(self), read$()) in
    (unfolding acc(u32(self.f$value), read$()) in self.f$value.val_int)), (unfolding acc(struct$m_List(self), read$()) in
    snap$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(self.f$next)))
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate bool(self: Ref) {
  acc(self.val_bool, write)
}

predicate m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Some, write) &&
  acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_Some(self.enum_Some), write)))
}

predicate m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_Some(self: Ref) {
  acc(self.f$0, write) &&
  acc(struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global(self.f$0), write)
}

predicate struct$m_List(self: Ref) {
  acc(self.f$value, write) &&
  (acc(u32(self.f$value), write) &&
  (acc(self.f$next, write) &&
  acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(self.f$next), write)))
}

predicate struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global(self: Ref) {
  acc(self.val_ref, write) && acc(struct$m_List(self.val_ref), write)
}

predicate u32(self: Ref) {
  acc(self.val_int, write) && 0 <= self.val_int
}

method m_prepend_list() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var _aux_havoc_struct$m_List: Ref
  var __t11: Bool
  var __t12: Bool
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _7: Ref
  var _8: Ref
  var _9: Ref
  var _12: Ref
  var _13: Ref
  var _14: Ref
  var _15: Ref
  var _16: Ref
  var _17: Int
  
  label start
  // ========== start ==========
  // Def path: "ref_mut_arg::prepend_list"
  // Span: prusti-tests/tests/verify/pass/pure-fn/ref-mut-arg.rs:42:1: 53:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  // Preconditions:
  inhale acc(u32(_1), write) &&
    (acc(struct$m_List(_2), write) && acc(bool(_3), write))
  inhale true
  label pre
  // ========== bb0 ==========
  refute false
  __t0 := true
  // [mir] StorageLive(_4)
  // [mir] StorageLive(_5)
  // [mir] _5 = _1
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_int, write)
  unfold acc(u32(_1), write)
  _5.val_int := _1.val_int
  label l0
  // [mir] StorageLive(_6)
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = move _2
  _8 := _2
  label l1
  // [mir] _7 = std::boxed::Box::<List>::new(move _8) -> [return: bb1, unwind: bb13]
  _7 := builtin$havoc_ref()
  inhale acc(_7.val_ref, write)
  _aux_havoc_struct$m_List := builtin$havoc_ref()
  _7.val_ref := _aux_havoc_struct$m_List
  inhale acc(struct$m_List(_7.val_ref), write)
  _7.val_ref := _8
  label l2
  // ========== bb1 ==========
  refute false
  __t1 := true
  // [mir] StorageDead(_8)
  // [mir] _6 = std::option::Option::<std::boxed::Box<List>>::Some(move _7)
  _6 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_6), write)
  inhale m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_$$int$(_6) ==
    1
  // downcast _6 to enum_Some

  unfold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_6), write)
  unfold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_Some(_6.enum_Some), write)
  _6.enum_Some.f$0 := _7
  label l3
  // [mir] drop(_7) -> [return: bb2, unwind: bb12]
  // ========== bb2 ==========
  refute false
  __t2 := true
  // [mir] StorageDead(_7)
  // [mir] _4 = List { value: move _5, next: move _6 }
  _4 := builtin$havoc_ref()
  inhale acc(struct$m_List(_4), write)
  unfold acc(struct$m_List(_4), write)
  _4.f$value := _5
  label l4
  _4.f$next := _6
  label l5
  // [mir] drop(_6) -> [return: bb3, unwind: bb14]
  // ========== bb3 ==========
  refute false
  __t3 := true
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_5)
  // [mir] FakeRead(ForLet(None), _4)
  // [mir] StorageLive(_9)
  // [mir] _9 = _3
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_bool, write)
  unfold acc(bool(_3), write)
  _9.val_bool := _3.val_bool
  label l6
  // [mir] switchInt(move _9) -> [0: bb8, otherwise: bb4]
  __t11 := _9.val_bool
  if (__t11) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l8 ==========
  // MIR edge bb3 --> bb4
  // ========== bb4 ==========
  refute false
  __t4 := true
  // [mir] StorageLive(_11)
  // [mir] StorageLive(_12)
  // [mir] StorageLive(_13)
  // [mir] StorageLive(_14)
  // [mir] StorageLive(_15)
  // [mir] StorageLive(_16)
  // [mir] _16 = &mut _4
  _16 := builtin$havoc_ref()
  inhale acc(_16.val_ref, write)
  _16.val_ref := _4
  label l9
  // [mir] _15 = &(*_16)
  _15 := builtin$havoc_ref()
  inhale acc(_15.val_ref, write)
  _15.val_ref := _16.val_ref
  exhale acc(_16.val_ref.f$value, write - read$())
  inhale acc(_15.val_ref.f$value, read$())
  exhale acc(_16.val_ref.f$next, write - read$())
  inhale acc(_15.val_ref.f$next, read$())
  exhale acc(_16.val_ref.f$next.discriminant, write - read$())
  inhale acc(_15.val_ref.f$next.discriminant, read$())
  exhale acc(_16.val_ref.f$next.enum_Some, write - read$())
  inhale acc(_15.val_ref.f$next.enum_Some, read$())
  exhale acc(_16.val_ref.f$value.val_int, write - read$())
  inhale acc(_15.val_ref.f$value.val_int, read$())
  exhale acc(_16.val_ref.f$next.enum_Some.f$0, write - read$())
  inhale acc(_15.val_ref.f$next.enum_Some.f$0, read$())
  exhale acc(_16.val_ref.f$next.enum_Some.f$0.val_ref, write - read$())
  inhale acc(_15.val_ref.f$next.enum_Some.f$0.val_ref, read$())
  exhale acc(struct$m_List(_16.val_ref.f$next.enum_Some.f$0.val_ref), write -
    read$())
  inhale acc(struct$m_List(_15.val_ref.f$next.enum_Some.f$0.val_ref), read$())
  label l10
  // [mir] _14 = lookup(move _15, const 0_usize) -> [return: bb5, unwind: bb11]
  label l11
  _14 := builtin$havoc_ref()
  inhale acc(u32(_14), write)
  fold acc(struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global(_15.val_ref.f$next.enum_Some.f$0), read$())
  fold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_Some(_15.val_ref.f$next.enum_Some), read$())
  fold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_15.val_ref.f$next), read$())
  fold acc(u32(_15.val_ref.f$value), read$())
  fold acc(struct$m_List(_15.val_ref), read$())
  inhale (unfolding acc(u32(_14), write) in _14.val_int) ==
    m_lookup__$TY$__Snap$struct$m_List$$int$$$int$(snap$__$TY$__Snap$struct$m_List$struct$m_List$Snap$struct$m_List(_15.val_ref),
    0)
  // transfer perm _15.val_ref --> old[l11](_15.val_ref) // unchecked: false
  // ========== l12 ==========
  // MIR edge bb4 --> bb5
  // Expire borrows
  // expire_borrows ReborrowingDAG(L4,L1,L0,)

  if (__t4 && __t4) {
    // expire loan L1
    // transfer perm old[l11](_15.val_ref) --> old[l10](_15.val_ref) // unchecked: false
    unfold acc(struct$m_List(old[l10](_15.val_ref)), read$())
    unfold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(old[l10](_15.val_ref).f$next), read$())
    unfold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_Some(old[l10](_15.val_ref).f$next.enum_Some), read$())
    unfold acc(struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global(old[l10](_15.val_ref).f$next.enum_Some.f$0), read$())
    exhale acc(struct$m_List(old[l10](_15.val_ref).f$next.enum_Some.f$0.val_ref), read$())
    exhale acc(old[l10](_15.val_ref).f$next.enum_Some.f$0.val_ref, read$())
    exhale acc(old[l10](_15.val_ref).f$next.enum_Some.f$0, read$())
    unfold acc(u32(old[l10](_15.val_ref).f$value), read$())
    exhale acc(old[l10](_15.val_ref).f$value.val_int, read$())
    exhale acc(old[l10](_15.val_ref).f$next.enum_Some, read$())
    exhale acc(old[l10](_15.val_ref).f$next.discriminant, read$())
    exhale acc(old[l10](_15.val_ref).f$next, read$())
    exhale acc(old[l10](_15.val_ref).f$value, read$())
    inhale acc(_16.val_ref.f$value, write - read$())
    inhale acc(_16.val_ref.f$next, write - read$())
    inhale acc(_16.val_ref.f$next.discriminant, write - read$())
    inhale acc(_16.val_ref.f$next.enum_Some, write - read$())
    inhale acc(_16.val_ref.f$value.val_int, write - read$())
    inhale acc(_16.val_ref.f$next.enum_Some.f$0, write - read$())
    inhale acc(_16.val_ref.f$next.enum_Some.f$0.val_ref, write - read$())
    inhale acc(struct$m_List(_16.val_ref.f$next.enum_Some.f$0.val_ref), write -
      read$())
  }
  // ========== bb5 ==========
  refute false
  __t5 := true
  // [mir] StorageDead(_15)
  // [mir] StorageLive(_17)
  // [mir] _17 = _1
  _17 := builtin$havoc_int()
  _17 := _1.val_int
  label l13
  // [mir] _13 = Eq(move _14, move _17)
  _13 := builtin$havoc_ref()
  inhale acc(_13.val_bool, write)
  unfold acc(u32(_14), write)
  _13.val_bool := _14.val_int == _17
  // [mir] StorageDead(_17)
  // [mir] StorageDead(_14)
  // [mir] _12 = Not(move _13)
  _12 := builtin$havoc_ref()
  inhale acc(_12.val_bool, write)
  _12.val_bool := !_13.val_bool
  // [mir] StorageDead(_16)
  // [mir] StorageDead(_13)
  // [mir] switchInt(move _12) -> [0: bb7, otherwise: bb6]
  __t12 := _12.val_bool
  if (__t12) {
    goto bb2
  }
  goto bb1
  
  label bb1
  // ========== l14 ==========
  // MIR edge bb5 --> bb7
  // ========== bb7 ==========
  refute false
  __t7 := true
  // [mir] _11 = const ()
  // [mir] StorageDead(_12)
  // [mir] StorageDead(_11)
  // [mir] StorageLive(_19)
  // [mir] _19 = diverging() -> bb11
  label l16
  inhale true
  label l17
  inhale false
  goto end_of_method
  
  label bb2
  // ========== l15 ==========
  // MIR edge bb5 --> bb6
  // ========== bb6 ==========
  __t6 := true
  // [mir] StorageLive(_18)
  // [mir] _18 = core::panicking::panic(const "assertion failed: lookup(&mut result, 0) == x") -> bb11
  // Rust panic - const "assertion failed: lookup(&mut result, 0) == x"
  assert false
  goto end_of_method
  
  label return
  // ========== l7 ==========
  // MIR edge bb3 --> bb8
  // ========== bb8 ==========
  refute false
  __t8 := true
  // [mir] _0 = move _4
  _0 := _4
  label l18
  // [mir] StorageDead(_9)
  // [mir] drop(_4) -> [return: bb9, unwind: bb14]
  // ========== bb9 ==========
  refute false
  __t9 := true
  // [mir] StorageDead(_4)
  // [mir] drop(_2) -> [return: bb10, unwind: bb15]
  // ========== bb10 ==========
  __t10 := true
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l20
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  fold acc(struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global(_0.f$next.enum_Some.f$0), write)
  fold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_Some(_0.f$next.enum_Some), write)
  fold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_List$struct$m_std$$alloc$$Global$_end_(_0.f$next), write)
  fold acc(u32(_0.f$value), write)
  fold acc(struct$m_List(_0), write)
  // obtain acc(struct$m_List(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(struct$m_List(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
