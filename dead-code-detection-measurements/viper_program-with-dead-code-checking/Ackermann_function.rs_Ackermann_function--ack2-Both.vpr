domain MirrorDomain  {
  
  function mirror_simple$m_ack_pure__$TY$__$int$$$int$$$int$(_1: Int, _2: Int): Int 
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

function builtin$unreach__$TY$__$int$$$int$(): Int
  requires false


function m_ack_pure__$TY$__$int$$$int$$$int$(_1: Int, _2: Int): Int
  requires true
  requires 0 <= _1 && 0 <= _2
  ensures result >= 0
  ensures [result ==
    mirror_simple$m_ack_pure__$TY$__$int$$$int$$$int$(_1, _2),
    true]
{
  (_1 != 0 ?
    (_2 != 0 ?
      m_ack_pure__$TY$__$int$$$int$$$int$(_1 - 1, m_ack_pure__$TY$__$int$$$int$$$int$(_1,
      _2 - 1)) :
      m_ack_pure__$TY$__$int$$$int$$$int$(_1 - 1, 1)) :
    _2 + 1)
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate isize(self: Ref) {
  acc(self.val_int, write)
}

predicate tuple2$isize$isize(self: Ref) {
  acc(self.tuple_0, write) &&
  (acc(isize(self.tuple_0), write) &&
  (acc(self.tuple_1, write) && acc(isize(self.tuple_1), write)))
}

method m_ack2() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Int
  var __t16: Int
  var __t17: Bool
  var __t18: Bool
  var __t19: Bool
  var __t20: Bool
  var _1: Int
  var _2: Int
  var _3: Ref
  var _4: Ref
  var _5: Ref
  var _6: Int
  var _7: Int
  var _8: Ref
  var _9: Int
  var _10: Ref
  var _11: Int
  var _12: Ref
  var _13: Int
  var _14: Int
  var _15: Ref
  var _16: Int
  var _17: Ref
  var _18: Int
  var _19: Int
  var _20: Ref
  var _21: Int
  var _22: Ref
  var _t23: Int
  
  label start
  // ========== start ==========
  // Def path: "Ackermann_function::ack2"
  // Span: prusti-tests/tests/verify/pass/rosetta/Ackermann_function.rs:48:1: 54:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  // Preconditions:
  inhale true
  inhale true
  inhale 0 <= _1 && 0 <= _2
  label pre
  // ========== bb0 ==========
  refute false
  __t0 := true
  // [mir] StorageLive(_3)
  // [mir] StorageLive(_4)
  // [mir] _4 = _1
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_int, write)
  _4.val_int := _1
  label l0
  // [mir] StorageLive(_5)
  // [mir] _5 = _2
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_int, write)
  _5.val_int := _2
  label l1
  // [mir] _3 = (move _4, move _5)
  _3 := builtin$havoc_ref()
  inhale acc(tuple2$isize$isize(_3), write)
  unfold acc(tuple2$isize$isize(_3), write)
  _3.tuple_0 := _4
  label l2
  _3.tuple_1 := _5
  label l3
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_4)
  // [mir] FakeRead(ForMatchedPlace(None), _3)
  // [mir] switchInt((_3.0: isize)) -> [0: bb1, otherwise: bb2]
  __t15 := _3.tuple_0.val_int
  if (__t15 == 0) {
    goto l5
  }
  goto return
  
  label bb0
  // ========== l6 ==========
  // MIR edge bb2 --> bb4
  // ========== bb4 ==========
  __t2 := true
  // [mir] StorageLive(_13)
  // [mir] _13 = (_3.0: isize)
  _13 := builtin$havoc_int()
  _13 := _3.tuple_0.val_int
  label l8
  // [mir] StorageLive(_14)
  // [mir] _14 = (_3.1: isize)
  _14 := builtin$havoc_int()
  _14 := _3.tuple_1.val_int
  label l9
  // [mir] StorageLive(_15)
  // [mir] StorageLive(_16)
  // [mir] _16 = _13
  _16 := builtin$havoc_int()
  _16 := _13
  label l10
  // [mir] _17 = CheckedSub(_16, const 1_isize)
  _17 := builtin$havoc_ref()
  inhale acc(_17.tuple_0, write)
  inhale acc(_17.tuple_0.val_int, write)
  inhale acc(_17.tuple_1, write)
  inhale acc(_17.tuple_1.val_bool, write)
  _17.tuple_0.val_int := _16 - 1
  _17.tuple_1.val_bool := false
  // [mir] assert(!move (_17.1: bool), "attempt to compute `{} - {}`, which would overflow", move _16, const 1_isize) -> [success: bb10, unwind: bb15]
  __t17 := _17.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t17
  // ========== bb10 ==========
  __t3 := true
  // [mir] _15 = move (_17.0: isize)
  _15 := _17.tuple_0
  label l11
  // [mir] StorageDead(_16)
  // [mir] StorageLive(_18)
  // [mir] StorageLive(_19)
  // [mir] _19 = _13
  _19 := builtin$havoc_int()
  _19 := _13
  label l12
  // [mir] StorageLive(_20)
  // [mir] StorageLive(_21)
  // [mir] _21 = _14
  _21 := builtin$havoc_int()
  _21 := _14
  label l13
  // [mir] _22 = CheckedSub(_21, const 1_isize)
  _22 := builtin$havoc_ref()
  inhale acc(_22.tuple_0, write)
  inhale acc(_22.tuple_0.val_int, write)
  inhale acc(_22.tuple_1, write)
  inhale acc(_22.tuple_1.val_bool, write)
  _22.tuple_0.val_int := _21 - 1
  _22.tuple_1.val_bool := false
  // [mir] assert(!move (_22.1: bool), "attempt to compute `{} - {}`, which would overflow", move _21, const 1_isize) -> [success: bb11, unwind: bb15]
  __t18 := _22.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t18
  // ========== bb11 ==========
  refute false
  __t4 := true
  // [mir] _20 = move (_22.0: isize)
  _20 := _22.tuple_0
  label l14
  // [mir] StorageDead(_21)
  // [mir] _18 = ack2(move _19, move _20) -> [return: bb12, unwind: bb15]
  label l15
  assert 0 <= _19 && 0 <= _20.val_int
  assert true
  fold acc(isize(_20), write)
  exhale acc(isize(_20), write)
  _18 := builtin$havoc_int()
  inhale true
  inhale _18 ==
    m_ack_pure__$TY$__$int$$$int$$$int$(old[l15](_19), old[l15](_20.val_int)) &&
    _18 >= 0
  label l16
  // ========== bb12 ==========
  refute false
  __t5 := true
  // [mir] StorageDead(_20)
  // [mir] StorageDead(_19)
  // [mir] _0 = ack2(move _15, move _18) -> [return: bb13, unwind: bb15]
  label l17
  assert 0 <= _15.val_int && 0 <= _18
  assert true
  fold acc(isize(_15), write)
  exhale acc(isize(_15), write)
  _0 := builtin$havoc_ref()
  inhale acc(isize(_0), write)
  inhale true
  inhale (unfolding acc(isize(_0), write) in _0.val_int) ==
    m_ack_pure__$TY$__$int$$$int$$$int$(old[l17](_15.val_int), old[l17](_18)) &&
    (unfolding acc(isize(_0), write) in _0.val_int) >= 0
  label l18
  // ========== bb13 ==========
  refute false
  __t6 := true
  // [mir] StorageDead(_18)
  // [mir] StorageDead(_15)
  // [mir] StorageDead(_14)
  // [mir] StorageDead(_13)
  // [mir] goto -> bb14
  // ========== l27 ==========
  // drop Acc(_13.val_int, write) (Acc(_13.val_int, write))
  // drop Acc(_22.tuple_1.val_bool, write) (Acc(_22.tuple_1.val_bool, write))
  unfold acc(isize(_0), write)
  // drop Acc(_17.tuple_0, write) (Acc(_17.tuple_0, write))
  // drop Acc(_16.val_int, write) (Acc(_16.val_int, write))
  // drop Acc(_14.val_int, write) (Acc(_14.val_int, write))
  // drop Acc(_21.val_int, write) (Acc(_21.val_int, write))
  // drop Acc(_22.tuple_0, write) (Acc(_22.tuple_0, write))
  // drop Acc(_17.tuple_1.val_bool, write) (Acc(_17.tuple_1.val_bool, write))
  // drop Acc(_17.tuple_1, write) (Acc(_17.tuple_1, write))
  // drop Acc(_22.tuple_1, write) (Acc(_22.tuple_1, write))
  goto bb2
  
  label bb2
  // ========== bb14 ==========
  refute false
  __t14 := true
  // [mir] StorageDead(_3)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l28
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  fold acc(isize(_0), write)
  // obtain acc(isize(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  assert (unfolding acc(isize(_0), write) in _0.val_int) ==
    m_ack_pure__$TY$__$int$$$int$$$int$(old[pre](_1), old[pre](_2)) &&
    (unfolding acc(isize(_0), write) in _0.val_int) >= 0
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(isize(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label l4
  // ========== l7 ==========
  // MIR edge bb2 --> bb3
  // ========== bb3 ==========
  __t7 := true
  // [mir] falseEdge -> [real: bb7, imaginary: bb4]
  // ========== bb7 ==========
  __t8 := true
  // [mir] StorageLive(_9)
  // [mir] _9 = (_3.0: isize)
  _9 := builtin$havoc_int()
  _9 := _3.tuple_0.val_int
  label l19
  // [mir] StorageLive(_10)
  // [mir] StorageLive(_11)
  // [mir] _11 = _9
  _11 := builtin$havoc_int()
  _11 := _9
  label l20
  // [mir] _12 = CheckedSub(_11, const 1_isize)
  _12 := builtin$havoc_ref()
  inhale acc(_12.tuple_0, write)
  inhale acc(_12.tuple_0.val_int, write)
  inhale acc(_12.tuple_1, write)
  inhale acc(_12.tuple_1.val_bool, write)
  _12.tuple_0.val_int := _11 - 1
  _12.tuple_1.val_bool := false
  // [mir] assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", move _11, const 1_isize) -> [success: bb8, unwind: bb15]
  __t19 := _12.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t19
  // ========== bb8 ==========
  refute false
  __t9 := true
  // [mir] _10 = move (_12.0: isize)
  _10 := _12.tuple_0
  label l21
  // [mir] StorageDead(_11)
  // [mir] _0 = ack2(move _10, const 1_isize) -> [return: bb9, unwind: bb15]
  label l22
  _t23 := builtin$havoc_int()
  assert 0 <= _10.val_int
  assert true
  fold acc(isize(_10), write)
  exhale acc(isize(_10), write)
  _0 := builtin$havoc_ref()
  inhale acc(isize(_0), write)
  inhale true
  inhale (unfolding acc(isize(_0), write) in _0.val_int) ==
    m_ack_pure__$TY$__$int$$$int$$$int$(old[l22](_10.val_int), old[l22](1)) &&
    (unfolding acc(isize(_0), write) in _0.val_int) >= 0
  label l23
  // ========== bb9 ==========
  refute false
  __t10 := true
  // [mir] StorageDead(_10)
  // [mir] StorageDead(_9)
  // [mir] goto -> bb14
  // ========== l29 ==========
  // drop Acc(_12.tuple_0, write) (Acc(_12.tuple_0, write))
  // drop Acc(_11.val_int, write) (Acc(_11.val_int, write))
  unfold acc(isize(_0), write)
  // drop Acc(_9.val_int, write) (Acc(_9.val_int, write))
  // drop Acc(_12.tuple_1.val_bool, write) (Acc(_12.tuple_1.val_bool, write))
  // drop Acc(_12.tuple_1, write) (Acc(_12.tuple_1, write))
  goto bb2
  
  label l5
  // ========== l5 ==========
  // MIR edge bb0 --> bb1
  // ========== bb1 ==========
  __t11 := true
  // [mir] falseEdge -> [real: bb5, imaginary: bb3]
  // ========== bb5 ==========
  __t12 := true
  // [mir] StorageLive(_6)
  // [mir] _6 = (_3.1: isize)
  _6 := builtin$havoc_int()
  _6 := _3.tuple_1.val_int
  label l24
  // [mir] StorageLive(_7)
  // [mir] _7 = _6
  _7 := builtin$havoc_int()
  _7 := _6
  label l25
  // [mir] _8 = CheckedAdd(_7, const 1_isize)
  _8 := builtin$havoc_ref()
  inhale acc(_8.tuple_0, write)
  inhale acc(_8.tuple_0.val_int, write)
  inhale acc(_8.tuple_1, write)
  inhale acc(_8.tuple_1.val_bool, write)
  _8.tuple_0.val_int := _7 + 1
  _8.tuple_1.val_bool := false
  // [mir] assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_isize) -> [success: bb6, unwind: bb15]
  __t20 := _8.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t20
  // ========== bb6 ==========
  refute false
  __t13 := true
  // [mir] _0 = move (_8.0: isize)
  _0 := _8.tuple_0
  label l26
  // [mir] StorageDead(_7)
  // [mir] StorageDead(_6)
  // [mir] goto -> bb14
  // ========== l30 ==========
  // drop Acc(_8.tuple_1.val_bool, write) (Acc(_8.tuple_1.val_bool, write))
  // drop Acc(_7.val_int, write) (Acc(_7.val_int, write))
  // drop Acc(_6.val_int, write) (Acc(_6.val_int, write))
  // drop Acc(_8.tuple_0, write) (Acc(_8.tuple_0, write))
  // drop Acc(_8.tuple_1, write) (Acc(_8.tuple_1, write))
  goto bb2
  
  label return
  // ========== l4 ==========
  // MIR edge bb0 --> bb2
  // ========== bb2 ==========
  __t1 := true
  // [mir] switchInt((_3.1: isize)) -> [0: bb3, otherwise: bb4]
  __t16 := _3.tuple_1.val_int
  if (__t16 == 0) {
    goto l4
  }
  goto bb0
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
