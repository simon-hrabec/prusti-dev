domain MirrorDomain  {
  
  function mirror_simple$m_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1: Snap$m_UsizeOption$_beg_$_end_): Bool 
  
  function mirror_simple$m_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(_1: Snap$m_UsizeOption$_beg_$_end_): Int 
  
  function mirror_simple$m_fib__$TY$__$int$$$int$(_1: Int): Int 
}

domain Snap$m_UsizeOption$_beg_$_end_  {
  
  function discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(self: Snap$m_UsizeOption$_beg_$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_0: Int): Snap$m_UsizeOption$_beg_$_end_ 
  
  function Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(self: Snap$m_UsizeOption$_beg_$_end_): Int 
  
  function cons$1$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(): Snap$m_UsizeOption$_beg_$_end_ 
  
  axiom Snap$m_UsizeOption$_beg_$_end_$discriminant_range {
    (forall self: Snap$m_UsizeOption$_beg_$_end_ ::
      { discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_UsizeOption$_beg_$_end_$0$injectivity {
    (forall _l_0: Int, _r_0: Int ::
      { cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_l_0),
      cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_r_0) }
      cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_l_0) ==
      cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_UsizeOption$_beg_$_end_$0$discriminant_axiom {
    (forall _0: Int ::
      { cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_0) }
      discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_0)) ==
      0)
  }
  
  axiom Snap$m_UsizeOption$_beg_$_end_$0$field$f$0$axiom {
    (forall _0: Int ::
      { Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_0)) }
      Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_0)) ==
      _0)
  }
  
  axiom Snap$m_UsizeOption$_beg_$_end_$0$field$f$0$valid {
    (forall self: Snap$m_UsizeOption$_beg_$_end_ ::
      { Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(self) }
      0 <=
      Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(self) &&
      Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(self) <=
      18446744073709551615)
  }
  
  axiom Snap$m_UsizeOption$_beg_$_end_$1$discriminant_axiom {
    discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(cons$1$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_()) ==
    1
  }
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Some: Ref

field f$0: Ref

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function builtin$unreach__$TY$__$int$$$int$(): Int
  requires false


function m_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1: Snap$m_UsizeOption$_beg_$_end_): Bool
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$m_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1),
    true]
{
  discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(_1) ==
  0
}

function m_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(_1: Snap$m_UsizeOption$_beg_$_end_): Int
  requires true
  requires m_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1)
  ensures true
  ensures 0 <= result
  ensures [result ==
    mirror_simple$m_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(_1),
    true]
{
  (discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(_1) ==
  0 ?
    Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(_1) :
    builtin$unreach__$TY$__$int$$$int$())
}

function m_UsizeOption$_beg_$_end_$$discriminant$$__$TY$__m_UsizeOption$_beg_$_end_$$int$(self: Ref): Int
  requires acc(m_UsizeOption$_beg_$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(self)) ==
    result
{
  (unfolding acc(m_UsizeOption$_beg_$_end_(self), read$()) in
    self.discriminant)
}

function m_fib__$TY$__$int$$$int$(_1: Int): Int
  requires true
  requires true
  requires 0 <= _1
  ensures true
  ensures 0 <= result
  ensures [result == mirror_simple$m_fib__$TY$__$int$$$int$(_1), true]
{
  (_1 == 1 ?
    1 :
    (_1 == 0 ?
      0 :
      m_fib__$TY$__$int$$$int$(_1 - 1) + m_fib__$TY$__$int$$$int$(_1 - 2)))
}

function snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(self: Ref): Snap$m_UsizeOption$_beg_$_end_
  requires acc(m_UsizeOption$_beg_$_end_(self), read$())
{
  ((unfolding acc(m_UsizeOption$_beg_$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_() :
    cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_((unfolding acc(m_UsizeOption$_beg_$_end_(self), read$()) in
      (unfolding acc(m_UsizeOption$_beg_$_end_Some(self.enum_Some), read$()) in
        (unfolding acc(usize(self.enum_Some.f$0), read$()) in
          self.enum_Some.f$0.val_int)))))
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate m_UsizeOption$_beg_$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Some, write) &&
  acc(m_UsizeOption$_beg_$_end_Some(self.enum_Some), write)))
}

predicate m_UsizeOption$_beg_$_end_Some(self: Ref) {
  acc(self.f$0, write) && acc(usize(self.f$0), write)
}

predicate tuple0$(self: Ref) {
  true
}

predicate usize(self: Ref) {
  acc(self.val_int, write) && 0 <= self.val_int
}

method m_recursive_fibonacci() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Int
  var __t12: Bool
  var __t13: Bool
  var _1: Int
  var _2: Int
  var _3: Int
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _7: Ref
  var _8: Ref
  var _9: Ref
  var _10: Ref
  var _11: Ref
  var _12: Int
  var _13: Int
  var _14: Int
  var _15: Int
  var _16: Ref
  var _17: Ref
  var _18: Int
  var _19: Ref
  var _20: Int
  var _21: Ref
  var _22: Ref
  var _23: Int
  var _24: Ref
  var _25: Int
  var _26: Int
  
  label start
  // ========== start ==========
  // Def path: "fibonacci::recursive_fibonacci"
  // Span: prusti-tests/tests/verify/pass/quick/fibonacci.rs:93:1: 101:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  // Preconditions:
  inhale _1 >= 0 && (_2 >= 0 && _3 >= 0)
  inhale true
  inhale _1 >= 1 &&
    (m_fib__$TY$__$int$$$int$(_1 - 1) == _2 &&
    m_fib__$TY$__$int$$$int$(_1) == _3)
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_4)
  // [mir] _4 = _2
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_int, write)
  inhale _2 >= 0
  _4.val_int := _2
  label l0
  // [mir] FakeRead(ForLet(None), _4)
  // [mir] StorageLive(_5)
  // [mir] _5 = _3
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_int, write)
  inhale _3 >= 0
  _5.val_int := _3
  label l1
  // [mir] FakeRead(ForLet(None), _5)
  // [mir] StorageLive(_6)
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = &mut _4
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_ref, write)
  _8.val_ref := _4
  label l2
  // [mir] _7 = &mut (*_8)
  _7 := builtin$havoc_ref()
  inhale acc(_7.val_ref, write)
  _7.val_ref := _8.val_ref
  label l3
  // [mir] StorageLive(_9)
  // [mir] StorageLive(_10)
  // [mir] _10 = &mut _5
  _10 := builtin$havoc_ref()
  inhale acc(_10.val_ref, write)
  _10.val_ref := _5
  label l4
  // [mir] _9 = &mut (*_10)
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_ref, write)
  _9.val_ref := _10.val_ref
  label l5
  // [mir] _6 = swap(move _7, move _9) -> [return: bb1, unwind: bb11]
  label l6
  assert true
  fold acc(usize(_7.val_ref), write)
  fold acc(usize(_9.val_ref), write)
  exhale acc(_7.val_ref, write) &&
    (acc(usize(_7.val_ref), write) &&
    (acc(_9.val_ref, write) && acc(usize(_9.val_ref), write)))
  _6 := builtin$havoc_ref()
  inhale acc(usize(old[l6](_7.val_ref)), write) &&
    acc(usize(old[l6](_9.val_ref)), write)
  inhale acc(tuple0$(_6), write)
  inhale true
  inhale (unfolding acc(usize(old[l6](_9.val_ref)), write) in
      (unfolding acc(usize(old[l6](_7.val_ref)), write) in
        old[l6](_7.val_ref).val_int == old[l6](_9.val_ref.val_int) &&
        old[l6](_9.val_ref).val_int == old[l6](_7.val_ref.val_int)))
  label l7
  // ========== l8 ==========
  // MIR edge bb0 --> bb1
  // Expire borrows
  // expire_borrows ReborrowingDAG(L7,L6,L3,L2,L1,L0,)

  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageDead(_9)
  // [mir] StorageDead(_7)
  // [mir] StorageDead(_10)
  // [mir] StorageDead(_8)
  // [mir] StorageDead(_6)
  // [mir] StorageLive(_11)
  // [mir] StorageLive(_12)
  // [mir] _12 = _5
  _12 := builtin$havoc_int()
  unfold acc(usize(_5), write)
  _12 := _5.val_int
  label l9
  // [mir] StorageLive(_13)
  // [mir] _13 = _4
  _13 := builtin$havoc_int()
  unfold acc(usize(_4), write)
  _13 := _4.val_int
  label l10
  // [mir] _11 = checked_add(move _12, move _13) -> [return: bb2, unwind: bb11]
  label l11
  assert true
  assert _12 >= 0
  assert _13 >= 0
  exhale _12 >= 0 && _13 >= 0
  _11 := builtin$havoc_ref()
  inhale acc(m_UsizeOption$_beg_$_end_(_11), write)
  inhale true
  inhale !m_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_11)) ||
    old[l11](_12) + old[l11](_13) ==
    m_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_11))
  label l12
  // ========== bb2 ==========
  __t2 := true
  // [mir] StorageDead(_13)
  // [mir] StorageDead(_12)
  // [mir] FakeRead(ForMatchedPlace(None), _11)
  // [mir] _14 = discriminant(_11)
  _14 := builtin$havoc_int()
  _14 := m_UsizeOption$_beg_$_end_$$discriminant$$__$TY$__m_UsizeOption$_beg_$_end_$$int$(_11)
  // [mir] switchInt(move _14) -> [0: bb3, otherwise: bb9]
  __t11 := _14
  if (__t11 == 0) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l14 ==========
  // MIR edge bb2 --> bb3
  // ========== bb3 ==========
  __t4 := true
  // [mir] falseEdge -> [real: bb4, imaginary: bb9]
  // ========== bb4 ==========
  __t5 := true
  // [mir] StorageLive(_15)
  // [mir] _15 = ((_11 as Some).0: usize)
  _15 := builtin$havoc_int()
  unfold acc(m_UsizeOption$_beg_$_end_(_11), write)
  unfold acc(m_UsizeOption$_beg_$_end_Some(_11.enum_Some), write)
  unfold acc(usize(_11.enum_Some.f$0), write)
  _15 := _11.enum_Some.f$0.val_int
  label l15
  // [mir] StorageLive(_16)
  // [mir] StorageLive(_17)
  // [mir] StorageLive(_18)
  // [mir] _18 = _1
  _18 := builtin$havoc_int()
  inhale _1 >= 0
  _18 := _1
  label l16
  // [mir] _19 = CheckedAdd(_18, const 1_usize)
  _19 := builtin$havoc_ref()
  inhale acc(_19.tuple_0, write)
  inhale acc(_19.tuple_0.val_int, write)
  inhale acc(_19.tuple_1, write)
  inhale acc(_19.tuple_1.val_bool, write)
  _19.tuple_0.val_int := _18 + 1
  _19.tuple_1.val_bool := false
  // [mir] assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _18, const 1_usize) -> [success: bb5, unwind: bb11]
  __t12 := _19.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t12
  // ========== bb5 ==========
  __t6 := true
  // [mir] _17 = move (_19.0: usize)
  _17 := _19.tuple_0
  label l17
  // [mir] StorageDead(_18)
  // [mir] StorageLive(_20)
  // [mir] _20 = _15
  _20 := builtin$havoc_int()
  _20 := _15
  label l18
  // [mir] _16 = print_fib(move _17, move _20) -> [return: bb6, unwind: bb11]
  label l19
  assert m_fib__$TY$__$int$$$int$(_17.val_int) == _20
  assert true
  fold acc(usize(_17), write)
  assert _20 >= 0
  exhale acc(usize(_17), write) && _20 >= 0
  _16 := builtin$havoc_ref()
  inhale acc(tuple0$(_16), write)
  inhale true
  label l20
  // ========== bb6 ==========
  __t7 := true
  // [mir] StorageDead(_20)
  // [mir] StorageDead(_17)
  // [mir] StorageDead(_16)
  // [mir] StorageLive(_21)
  // [mir] StorageLive(_22)
  // [mir] StorageLive(_23)
  // [mir] _23 = _1
  _23 := builtin$havoc_int()
  _23 := _1
  label l21
  // [mir] _24 = CheckedAdd(_23, const 1_usize)
  _24 := builtin$havoc_ref()
  inhale acc(_24.tuple_0, write)
  inhale acc(_24.tuple_0.val_int, write)
  inhale acc(_24.tuple_1, write)
  inhale acc(_24.tuple_1.val_bool, write)
  _24.tuple_0.val_int := _23 + 1
  _24.tuple_1.val_bool := false
  // [mir] assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", move _23, const 1_usize) -> [success: bb7, unwind: bb11]
  __t13 := _24.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t13
  // ========== bb7 ==========
  __t8 := true
  // [mir] _22 = move (_24.0: usize)
  _22 := _24.tuple_0
  label l22
  // [mir] StorageDead(_23)
  // [mir] StorageLive(_25)
  // [mir] _25 = _4
  _25 := builtin$havoc_int()
  _25 := _4.val_int
  label l23
  // [mir] StorageLive(_26)
  // [mir] _26 = _15
  _26 := builtin$havoc_int()
  _26 := _15
  label l24
  // [mir] _21 = recursive_fibonacci(move _22, move _25, move _26) -> [return: bb8, unwind: bb11]
  label l25
  assert _22.val_int >= 1 &&
    (m_fib__$TY$__$int$$$int$(_22.val_int - 1) == _25 &&
    m_fib__$TY$__$int$$$int$(_22.val_int) == _26)
  assert true
  fold acc(usize(_22), write)
  assert _25 >= 0
  assert _26 >= 0
  exhale acc(usize(_22), write) && (_25 >= 0 && _26 >= 0)
  _21 := builtin$havoc_ref()
  inhale acc(tuple0$(_21), write)
  inhale true
  label l26
  // ========== bb8 ==========
  __t9 := true
  // [mir] StorageDead(_26)
  // [mir] StorageDead(_25)
  // [mir] StorageDead(_22)
  // [mir] StorageDead(_21)
  // [mir] _0 = const ()
  // [mir] StorageDead(_15)
  // [mir] goto -> bb10
  // ========== l29 ==========
  fold acc(usize(_11.enum_Some.f$0), write)
  fold acc(m_UsizeOption$_beg_$_end_Some(_11.enum_Some), write)
  fold acc(m_UsizeOption$_beg_$_end_(_11), write)
  // drop Acc(_24.tuple_1.val_bool, write) (Acc(_24.tuple_1.val_bool, write))
  // drop Acc(_15.val_int, write) (Acc(_15.val_int, write))
  // drop Acc(_19.tuple_0, write) (Acc(_19.tuple_0, write))
  // drop Acc(_24.tuple_0, write) (Acc(_24.tuple_0, write))
  // drop Acc(_23.val_int, write) (Acc(_23.val_int, write))
  // drop Acc(_18.val_int, write) (Acc(_18.val_int, write))
  // drop Acc(_19.tuple_1.val_bool, write) (Acc(_19.tuple_1.val_bool, write))
  // drop Pred(_21, write) (Pred(_21, write))
  // drop Pred(_16, write) (Pred(_16, write))
  // drop Acc(_19.tuple_1, write) (Acc(_19.tuple_1, write))
  // drop Acc(_24.tuple_1, write) (Acc(_24.tuple_1, write))
  goto l8
  
  label l8
  // ========== bb10 ==========
  __t10 := true
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_4)
  // [mir] StorageDead(_11)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l28
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  fold acc(tuple0$(_0), write)
  // obtain acc(tuple0$(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label return
  // ========== l13 ==========
  // MIR edge bb2 --> bb9
  // ========== bb9 ==========
  __t3 := true
  // [mir] _0 = const ()
  // [mir] goto -> bb10
  // ========== l27 ==========
  inhale _1 >= 0
  goto l8
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
