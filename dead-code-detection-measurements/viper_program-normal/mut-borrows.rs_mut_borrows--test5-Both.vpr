domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field f$f: Ref

field f$g: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate struct$m_U(self: Ref) {
  acc(self.f$f, write) &&
  (acc(u32(self.f$f), write) &&
  (acc(self.f$g, write) && acc(u32(self.f$g), write)))
}

predicate tuple0$(self: Ref) {
  true
}

predicate u32(self: Ref) {
  acc(self.val_int, write) && 0 <= self.val_int
}

method m_test5() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var _aux_havoc_u32: Ref
  var __t6: Bool
  var __t7: Bool
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _8: Ref
  var _9: Ref
  var _10: Int
  var _13: Ref
  var _14: Ref
  var _15: Int
  var _17: Ref
  var _18: Ref
  
  label start
  // ========== start ==========
  // Def path: "mut_borrows::test5"
  // Span: prusti-tests/tests/verify/pass/quick/mut-borrows.rs:52:1: 65:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  // Preconditions:
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_1)
  // [mir] _1 = U { f: const 6_u32, g: const 1_u32 }
  _1 := builtin$havoc_ref()
  inhale acc(struct$m_U(_1), write)
  _aux_havoc_u32 := builtin$havoc_ref()
  unfold acc(struct$m_U(_1), write)
  _1.f$f := _aux_havoc_u32
  inhale acc(_1.f$f.val_int, write)
  _1.f$f.val_int := 6
  _aux_havoc_u32 := builtin$havoc_ref()
  _1.f$g := _aux_havoc_u32
  inhale acc(_1.f$g.val_int, write)
  _1.f$g.val_int := 1
  // [mir] FakeRead(ForLet(None), _1)
  // [mir] StorageLive(_2)
  // [mir] _2 = &mut _1
  _2 := builtin$havoc_ref()
  inhale acc(_2.val_ref, write)
  _2.val_ref := _1
  label l0
  // [mir] FakeRead(ForLet(None), _2)
  // [mir] StorageLive(_3)
  // [mir] _3 = &mut ((*_2).0: u32)
  _3 := builtin$havoc_ref()
  inhale acc(_3.val_ref, write)
  _3.val_ref := _2.val_ref.f$f
  label l1
  // [mir] FakeRead(ForLet(None), _3)
  // [mir] StorageLive(_4)
  // [mir] _4 = &mut ((*_2).1: u32)
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_ref, write)
  _4.val_ref := _2.val_ref.f$g
  label l2
  // [mir] FakeRead(ForLet(None), _4)
  // [mir] (*_3) = const 7_u32
  _3.val_ref.val_int := 7
  // [mir] StorageLive(_5)
  // [mir] _5 = &mut (*_3)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_ref, write)
  _5.val_ref := _3.val_ref
  label l3
  // [mir] FakeRead(ForLet(None), _5)
  // [mir] StorageLive(_6)
  // [mir] _6 = &mut (*_4)
  _6 := builtin$havoc_ref()
  inhale acc(_6.val_ref, write)
  _6.val_ref := _4.val_ref
  label l4
  // [mir] FakeRead(ForLet(None), _6)
  // [mir] (*_5) = const 3_u32
  _5.val_ref.val_int := 3
  // expire_borrows ReborrowingDAG(L3,L1,)

  // [mir] (*_6) = const 4_u32
  _6.val_ref.val_int := 4
  // expire_borrows ReborrowingDAG(L4,L2,L0,)

  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] StorageLive(_9)
  // [mir] StorageLive(_10)
  // [mir] _10 = (_1.0: u32)
  _10 := builtin$havoc_int()
  _10 := _1.f$f.val_int
  label l5
  // [mir] _9 = Eq(move _10, const 3_u32)
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_bool, write)
  _9.val_bool := _10 == 3
  // [mir] StorageDead(_10)
  // [mir] _8 = Not(move _9)
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := !_9.val_bool
  // [mir] StorageDead(_9)
  // [mir] switchInt(move _8) -> [0: bb2, otherwise: bb1]
  __t6 := _8.val_bool
  if (__t6) {
    goto l7
  }
  goto return
  
  label bb0
  // ========== l9 ==========
  // MIR edge bb2 --> bb4
  // ========== bb4 ==========
  __t4 := true
  // [mir] _12 = const ()
  // [mir] StorageDead(_13)
  // [mir] StorageDead(_12)
  // [mir] StorageLive(_17)
  // [mir] StorageLive(_18)
  // [mir] _18 = move _1
  _18 := _1
  label l11
  // [mir] _17 = check_u(move _18) -> [return: bb5, unwind: bb6]
  label l12
  assert _18.f$f.val_int == 3 && _18.f$g.val_int == 4
  assert true
  fold acc(u32(_18.f$g), write)
  fold acc(u32(_18.f$f), write)
  fold acc(struct$m_U(_18), write)
  exhale acc(struct$m_U(_18), write)
  _17 := builtin$havoc_ref()
  inhale acc(tuple0$(_17), write)
  inhale true
  label l13
  // ========== bb5 ==========
  __t5 := true
  // [mir] StorageDead(_18)
  // [mir] StorageDead(_17)
  // [mir] _0 = const ()
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_4)
  // [mir] StorageDead(_3)
  // [mir] StorageDead(_2)
  // [mir] StorageDead(_1)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l15
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  fold acc(tuple0$(_0), write)
  // obtain acc(tuple0$(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label l6
  // ========== l10 ==========
  // MIR edge bb2 --> bb3
  // ========== bb3 ==========
  __t3 := true
  // [mir] StorageLive(_16)
  // [mir] _16 = core::panicking::panic(const "assertion failed: a.g == 4") -> bb6
  // Rust panic - const "assertion failed: a.g == 4"
  assert false
  goto end_of_method
  
  label l7
  // ========== l7 ==========
  // MIR edge bb0 --> bb1
  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageLive(_11)
  // [mir] _11 = core::panicking::panic(const "assertion failed: a.f == 3") -> bb6
  // Rust panic - const "assertion failed: a.f == 3"
  assert false
  goto end_of_method
  
  label return
  // ========== l6 ==========
  // MIR edge bb0 --> bb2
  // ========== bb2 ==========
  __t2 := true
  // [mir] _7 = const ()
  // [mir] StorageDead(_8)
  // [mir] StorageDead(_7)
  // [mir] StorageLive(_12)
  // [mir] StorageLive(_13)
  // [mir] StorageLive(_14)
  // [mir] StorageLive(_15)
  // [mir] _15 = (_1.1: u32)
  _15 := builtin$havoc_int()
  _15 := _1.f$g.val_int
  label l8
  // [mir] _14 = Eq(move _15, const 4_u32)
  _14 := builtin$havoc_ref()
  inhale acc(_14.val_bool, write)
  _14.val_bool := _15 == 4
  // [mir] StorageDead(_15)
  // [mir] _13 = Not(move _14)
  _13 := builtin$havoc_ref()
  inhale acc(_13.val_bool, write)
  _13.val_bool := !_14.val_bool
  // [mir] StorageDead(_14)
  // [mir] switchInt(move _13) -> [0: bb4, otherwise: bb3]
  __t7 := _13.val_bool
  if (__t7) {
    goto l6
  }
  goto bb0
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
